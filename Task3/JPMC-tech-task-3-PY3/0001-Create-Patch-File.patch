From c91d59c5c0a613186f29e4ad40b6ed6a34ea3578 Mon Sep 17 00:00:00 2001
From: Md Irshad <irshadmd039@gmail.com>
Date: Wed, 20 May 2020 19:02:52 +0530
Subject: [PATCH] Create Patch File

---
 binding.gyp            |  8 ++++++++
 src/DataManipulator.ts | 32 ++++++++++++++++++++++----------
 src/Graph.tsx          | 25 +++++++++++++++----------
 src/binding.cc         |  0
 4 files changed, 45 insertions(+), 20 deletions(-)
 create mode 100644 binding.gyp
 create mode 100644 src/binding.cc

diff --git a/binding.gyp b/binding.gyp
new file mode 100644
index 0000000..485a30d
--- /dev/null
+++ b/binding.gyp
@@ -0,0 +1,8 @@
+{
+  "targets": [
+    {
+      "target_name": "binding",
+      "sources": [ "src/binding.cc" ]
+    }
+  ]
+}
\ No newline at end of file
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..1991598 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,32 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc:number,
+  price_def:number,
+  ratio:number,
   timestamp: Date,
+  upper_bound:number,
+  lower_bound:number,
+  trigger_alert:number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC=(serverRespond[0].top_ask.price+serverRespond[0].top_bid.price)/2;
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+    const ratio=priceABC/priceDEF;
+    const upperBound=1+0.05;
+    const lowerBound=1-0.05;
+    return {
+      price_abc: priceABC,
+      price_def:priceDEF,
+      ratio,
+      timestamp: serverRespond[0].timestamp>serverRespond[1].timestamp ?
+        serverRespond[0].timestamp:serverRespond[1].timestamp,
+      upper_bound:upperBound,
+      lower_bound:lowerBound,
+      trigger_alert:(ratio>upperBound||ratio<lowerBound)?ratio :undefined,
+    };
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..0df6a0c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc:'float',
+      price_def:'float',
+      ratio:'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +39,25 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio:'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
diff --git a/src/binding.cc b/src/binding.cc
new file mode 100644
index 0000000..e69de29
-- 
2.18.0.windows.1

